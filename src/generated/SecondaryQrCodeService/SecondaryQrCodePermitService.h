/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SecondaryQrCodePermitService_H
#define SecondaryQrCodePermitService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "service_types.h"

namespace LineThrift { namespace SecondaryQrCode {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SecondaryQrCodePermitServiceIf {
 public:
  virtual ~SecondaryQrCodePermitServiceIf() {}
  virtual void cancelPinCode(const  ::CancelPinCodeRequest& request) = 0;
  virtual void getLoginActorContext( ::GetLoginActorContextResponse& _return, const  ::GetLoginActorContextRequest& request) = 0;
  virtual void verifyPinCode(const  ::VerifyPinCodeRequest& request) = 0;
  virtual void verifyQrCode(const  ::VerifyQrCodeRequest& request) = 0;
};

class SecondaryQrCodePermitServiceIfFactory {
 public:
  typedef SecondaryQrCodePermitServiceIf Handler;

  virtual ~SecondaryQrCodePermitServiceIfFactory() {}

  virtual SecondaryQrCodePermitServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SecondaryQrCodePermitServiceIf* /* handler */) = 0;
};

class SecondaryQrCodePermitServiceIfSingletonFactory : virtual public SecondaryQrCodePermitServiceIfFactory {
 public:
  SecondaryQrCodePermitServiceIfSingletonFactory(const ::std::shared_ptr<SecondaryQrCodePermitServiceIf>& iface) : iface_(iface) {}
  virtual ~SecondaryQrCodePermitServiceIfSingletonFactory() {}

  virtual SecondaryQrCodePermitServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SecondaryQrCodePermitServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SecondaryQrCodePermitServiceIf> iface_;
};

class SecondaryQrCodePermitServiceNull : virtual public SecondaryQrCodePermitServiceIf {
 public:
  virtual ~SecondaryQrCodePermitServiceNull() {}
  void cancelPinCode(const  ::CancelPinCodeRequest& /* request */) {
    return;
  }
  void getLoginActorContext( ::GetLoginActorContextResponse& /* _return */, const  ::GetLoginActorContextRequest& /* request */) {
    return;
  }
  void verifyPinCode(const  ::VerifyPinCodeRequest& /* request */) {
    return;
  }
  void verifyQrCode(const  ::VerifyQrCodeRequest& /* request */) {
    return;
  }
};

typedef struct _SecondaryQrCodePermitService_cancelPinCode_args__isset {
  _SecondaryQrCodePermitService_cancelPinCode_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodePermitService_cancelPinCode_args__isset;

class SecondaryQrCodePermitService_cancelPinCode_args {
 public:

  SecondaryQrCodePermitService_cancelPinCode_args(const SecondaryQrCodePermitService_cancelPinCode_args&);
  SecondaryQrCodePermitService_cancelPinCode_args& operator=(const SecondaryQrCodePermitService_cancelPinCode_args&);
  SecondaryQrCodePermitService_cancelPinCode_args() {
  }

  virtual ~SecondaryQrCodePermitService_cancelPinCode_args() noexcept;
   ::CancelPinCodeRequest request;

  _SecondaryQrCodePermitService_cancelPinCode_args__isset __isset;

  void __set_request(const  ::CancelPinCodeRequest& val);

  bool operator == (const SecondaryQrCodePermitService_cancelPinCode_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodePermitService_cancelPinCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodePermitService_cancelPinCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodePermitService_cancelPinCode_pargs {
 public:


  virtual ~SecondaryQrCodePermitService_cancelPinCode_pargs() noexcept;
  const  ::CancelPinCodeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodePermitService_cancelPinCode_result__isset {
  _SecondaryQrCodePermitService_cancelPinCode_result__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodePermitService_cancelPinCode_result__isset;

class SecondaryQrCodePermitService_cancelPinCode_result {
 public:

  SecondaryQrCodePermitService_cancelPinCode_result(const SecondaryQrCodePermitService_cancelPinCode_result&);
  SecondaryQrCodePermitService_cancelPinCode_result& operator=(const SecondaryQrCodePermitService_cancelPinCode_result&);
  SecondaryQrCodePermitService_cancelPinCode_result() {
  }

  virtual ~SecondaryQrCodePermitService_cancelPinCode_result() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodePermitService_cancelPinCode_result__isset __isset;

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodePermitService_cancelPinCode_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodePermitService_cancelPinCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodePermitService_cancelPinCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodePermitService_cancelPinCode_presult__isset {
  _SecondaryQrCodePermitService_cancelPinCode_presult__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodePermitService_cancelPinCode_presult__isset;

class SecondaryQrCodePermitService_cancelPinCode_presult {
 public:


  virtual ~SecondaryQrCodePermitService_cancelPinCode_presult() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodePermitService_cancelPinCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SecondaryQrCodePermitService_getLoginActorContext_args__isset {
  _SecondaryQrCodePermitService_getLoginActorContext_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodePermitService_getLoginActorContext_args__isset;

class SecondaryQrCodePermitService_getLoginActorContext_args {
 public:

  SecondaryQrCodePermitService_getLoginActorContext_args(const SecondaryQrCodePermitService_getLoginActorContext_args&);
  SecondaryQrCodePermitService_getLoginActorContext_args& operator=(const SecondaryQrCodePermitService_getLoginActorContext_args&);
  SecondaryQrCodePermitService_getLoginActorContext_args() {
  }

  virtual ~SecondaryQrCodePermitService_getLoginActorContext_args() noexcept;
   ::GetLoginActorContextRequest request;

  _SecondaryQrCodePermitService_getLoginActorContext_args__isset __isset;

  void __set_request(const  ::GetLoginActorContextRequest& val);

  bool operator == (const SecondaryQrCodePermitService_getLoginActorContext_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodePermitService_getLoginActorContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodePermitService_getLoginActorContext_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodePermitService_getLoginActorContext_pargs {
 public:


  virtual ~SecondaryQrCodePermitService_getLoginActorContext_pargs() noexcept;
  const  ::GetLoginActorContextRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodePermitService_getLoginActorContext_result__isset {
  _SecondaryQrCodePermitService_getLoginActorContext_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodePermitService_getLoginActorContext_result__isset;

class SecondaryQrCodePermitService_getLoginActorContext_result {
 public:

  SecondaryQrCodePermitService_getLoginActorContext_result(const SecondaryQrCodePermitService_getLoginActorContext_result&);
  SecondaryQrCodePermitService_getLoginActorContext_result& operator=(const SecondaryQrCodePermitService_getLoginActorContext_result&);
  SecondaryQrCodePermitService_getLoginActorContext_result() {
  }

  virtual ~SecondaryQrCodePermitService_getLoginActorContext_result() noexcept;
   ::GetLoginActorContextResponse success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodePermitService_getLoginActorContext_result__isset __isset;

  void __set_success(const  ::GetLoginActorContextResponse& val);

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodePermitService_getLoginActorContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodePermitService_getLoginActorContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodePermitService_getLoginActorContext_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodePermitService_getLoginActorContext_presult__isset {
  _SecondaryQrCodePermitService_getLoginActorContext_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodePermitService_getLoginActorContext_presult__isset;

class SecondaryQrCodePermitService_getLoginActorContext_presult {
 public:


  virtual ~SecondaryQrCodePermitService_getLoginActorContext_presult() noexcept;
   ::GetLoginActorContextResponse* success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodePermitService_getLoginActorContext_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SecondaryQrCodePermitService_verifyPinCode_args__isset {
  _SecondaryQrCodePermitService_verifyPinCode_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodePermitService_verifyPinCode_args__isset;

class SecondaryQrCodePermitService_verifyPinCode_args {
 public:

  SecondaryQrCodePermitService_verifyPinCode_args(const SecondaryQrCodePermitService_verifyPinCode_args&);
  SecondaryQrCodePermitService_verifyPinCode_args& operator=(const SecondaryQrCodePermitService_verifyPinCode_args&);
  SecondaryQrCodePermitService_verifyPinCode_args() {
  }

  virtual ~SecondaryQrCodePermitService_verifyPinCode_args() noexcept;
   ::VerifyPinCodeRequest request;

  _SecondaryQrCodePermitService_verifyPinCode_args__isset __isset;

  void __set_request(const  ::VerifyPinCodeRequest& val);

  bool operator == (const SecondaryQrCodePermitService_verifyPinCode_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodePermitService_verifyPinCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodePermitService_verifyPinCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodePermitService_verifyPinCode_pargs {
 public:


  virtual ~SecondaryQrCodePermitService_verifyPinCode_pargs() noexcept;
  const  ::VerifyPinCodeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodePermitService_verifyPinCode_result__isset {
  _SecondaryQrCodePermitService_verifyPinCode_result__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodePermitService_verifyPinCode_result__isset;

class SecondaryQrCodePermitService_verifyPinCode_result {
 public:

  SecondaryQrCodePermitService_verifyPinCode_result(const SecondaryQrCodePermitService_verifyPinCode_result&);
  SecondaryQrCodePermitService_verifyPinCode_result& operator=(const SecondaryQrCodePermitService_verifyPinCode_result&);
  SecondaryQrCodePermitService_verifyPinCode_result() {
  }

  virtual ~SecondaryQrCodePermitService_verifyPinCode_result() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodePermitService_verifyPinCode_result__isset __isset;

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodePermitService_verifyPinCode_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodePermitService_verifyPinCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodePermitService_verifyPinCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodePermitService_verifyPinCode_presult__isset {
  _SecondaryQrCodePermitService_verifyPinCode_presult__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodePermitService_verifyPinCode_presult__isset;

class SecondaryQrCodePermitService_verifyPinCode_presult {
 public:


  virtual ~SecondaryQrCodePermitService_verifyPinCode_presult() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodePermitService_verifyPinCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SecondaryQrCodePermitService_verifyQrCode_args__isset {
  _SecondaryQrCodePermitService_verifyQrCode_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodePermitService_verifyQrCode_args__isset;

class SecondaryQrCodePermitService_verifyQrCode_args {
 public:

  SecondaryQrCodePermitService_verifyQrCode_args(const SecondaryQrCodePermitService_verifyQrCode_args&);
  SecondaryQrCodePermitService_verifyQrCode_args& operator=(const SecondaryQrCodePermitService_verifyQrCode_args&);
  SecondaryQrCodePermitService_verifyQrCode_args() {
  }

  virtual ~SecondaryQrCodePermitService_verifyQrCode_args() noexcept;
   ::VerifyQrCodeRequest request;

  _SecondaryQrCodePermitService_verifyQrCode_args__isset __isset;

  void __set_request(const  ::VerifyQrCodeRequest& val);

  bool operator == (const SecondaryQrCodePermitService_verifyQrCode_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodePermitService_verifyQrCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodePermitService_verifyQrCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodePermitService_verifyQrCode_pargs {
 public:


  virtual ~SecondaryQrCodePermitService_verifyQrCode_pargs() noexcept;
  const  ::VerifyQrCodeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodePermitService_verifyQrCode_result__isset {
  _SecondaryQrCodePermitService_verifyQrCode_result__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodePermitService_verifyQrCode_result__isset;

class SecondaryQrCodePermitService_verifyQrCode_result {
 public:

  SecondaryQrCodePermitService_verifyQrCode_result(const SecondaryQrCodePermitService_verifyQrCode_result&);
  SecondaryQrCodePermitService_verifyQrCode_result& operator=(const SecondaryQrCodePermitService_verifyQrCode_result&);
  SecondaryQrCodePermitService_verifyQrCode_result() {
  }

  virtual ~SecondaryQrCodePermitService_verifyQrCode_result() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodePermitService_verifyQrCode_result__isset __isset;

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodePermitService_verifyQrCode_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodePermitService_verifyQrCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodePermitService_verifyQrCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodePermitService_verifyQrCode_presult__isset {
  _SecondaryQrCodePermitService_verifyQrCode_presult__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodePermitService_verifyQrCode_presult__isset;

class SecondaryQrCodePermitService_verifyQrCode_presult {
 public:


  virtual ~SecondaryQrCodePermitService_verifyQrCode_presult() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodePermitService_verifyQrCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SecondaryQrCodePermitServiceClient : virtual public SecondaryQrCodePermitServiceIf {
 public:
  SecondaryQrCodePermitServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SecondaryQrCodePermitServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void cancelPinCode(const  ::CancelPinCodeRequest& request);
  void send_cancelPinCode(const  ::CancelPinCodeRequest& request);
  void recv_cancelPinCode();
  void getLoginActorContext( ::GetLoginActorContextResponse& _return, const  ::GetLoginActorContextRequest& request);
  void send_getLoginActorContext(const  ::GetLoginActorContextRequest& request);
  void recv_getLoginActorContext( ::GetLoginActorContextResponse& _return);
  void verifyPinCode(const  ::VerifyPinCodeRequest& request);
  void send_verifyPinCode(const  ::VerifyPinCodeRequest& request);
  void recv_verifyPinCode();
  void verifyQrCode(const  ::VerifyQrCodeRequest& request);
  void send_verifyQrCode(const  ::VerifyQrCodeRequest& request);
  void recv_verifyQrCode();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SecondaryQrCodePermitServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SecondaryQrCodePermitServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SecondaryQrCodePermitServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_cancelPinCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLoginActorContext(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyPinCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyQrCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SecondaryQrCodePermitServiceProcessor(::std::shared_ptr<SecondaryQrCodePermitServiceIf> iface) :
    iface_(iface) {
    processMap_["cancelPinCode"] = &SecondaryQrCodePermitServiceProcessor::process_cancelPinCode;
    processMap_["getLoginActorContext"] = &SecondaryQrCodePermitServiceProcessor::process_getLoginActorContext;
    processMap_["verifyPinCode"] = &SecondaryQrCodePermitServiceProcessor::process_verifyPinCode;
    processMap_["verifyQrCode"] = &SecondaryQrCodePermitServiceProcessor::process_verifyQrCode;
  }

  virtual ~SecondaryQrCodePermitServiceProcessor() {}
};

class SecondaryQrCodePermitServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SecondaryQrCodePermitServiceProcessorFactory(const ::std::shared_ptr< SecondaryQrCodePermitServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SecondaryQrCodePermitServiceIfFactory > handlerFactory_;
};

class SecondaryQrCodePermitServiceMultiface : virtual public SecondaryQrCodePermitServiceIf {
 public:
  SecondaryQrCodePermitServiceMultiface(std::vector<std::shared_ptr<SecondaryQrCodePermitServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SecondaryQrCodePermitServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SecondaryQrCodePermitServiceIf> > ifaces_;
  SecondaryQrCodePermitServiceMultiface() {}
  void add(::std::shared_ptr<SecondaryQrCodePermitServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void cancelPinCode(const  ::CancelPinCodeRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelPinCode(request);
    }
    ifaces_[i]->cancelPinCode(request);
  }

  void getLoginActorContext( ::GetLoginActorContextResponse& _return, const  ::GetLoginActorContextRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLoginActorContext(_return, request);
    }
    ifaces_[i]->getLoginActorContext(_return, request);
    return;
  }

  void verifyPinCode(const  ::VerifyPinCodeRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyPinCode(request);
    }
    ifaces_[i]->verifyPinCode(request);
  }

  void verifyQrCode(const  ::VerifyQrCodeRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyQrCode(request);
    }
    ifaces_[i]->verifyQrCode(request);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SecondaryQrCodePermitServiceConcurrentClient : virtual public SecondaryQrCodePermitServiceIf {
 public:
  SecondaryQrCodePermitServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SecondaryQrCodePermitServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void cancelPinCode(const  ::CancelPinCodeRequest& request);
  int32_t send_cancelPinCode(const  ::CancelPinCodeRequest& request);
  void recv_cancelPinCode(const int32_t seqid);
  void getLoginActorContext( ::GetLoginActorContextResponse& _return, const  ::GetLoginActorContextRequest& request);
  int32_t send_getLoginActorContext(const  ::GetLoginActorContextRequest& request);
  void recv_getLoginActorContext( ::GetLoginActorContextResponse& _return, const int32_t seqid);
  void verifyPinCode(const  ::VerifyPinCodeRequest& request);
  int32_t send_verifyPinCode(const  ::VerifyPinCodeRequest& request);
  void recv_verifyPinCode(const int32_t seqid);
  void verifyQrCode(const  ::VerifyQrCodeRequest& request);
  int32_t send_verifyQrCode(const  ::VerifyQrCodeRequest& request);
  void recv_verifyQrCode(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
