/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SecondaryQrCodeLoginService_H
#define SecondaryQrCodeLoginService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "service_types.h"

namespace LineThrift { namespace SecondaryQrCode {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SecondaryQrCodeLoginServiceIf {
 public:
  virtual ~SecondaryQrCodeLoginServiceIf() {}
  virtual void createSession( ::CreateQrSessionResponse& _return, const  ::CreateQrSessionRequest& request) = 0;
  virtual void createQrCode( ::CreateQrCodeResponse& _return, const  ::CreateQrCodeRequest& request) = 0;
  virtual void createPinCode( ::CreatePinCodeResponse& _return, const  ::CreatePinCodeRequest& request) = 0;
  virtual void verifyCertificate(const  ::VerifyCertificateRequest& request) = 0;
  virtual void qrCodeLogin( ::QrCodeLoginResponse& _return, const  ::QrCodeLoginRequest& request) = 0;
};

class SecondaryQrCodeLoginServiceIfFactory {
 public:
  typedef SecondaryQrCodeLoginServiceIf Handler;

  virtual ~SecondaryQrCodeLoginServiceIfFactory() {}

  virtual SecondaryQrCodeLoginServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SecondaryQrCodeLoginServiceIf* /* handler */) = 0;
};

class SecondaryQrCodeLoginServiceIfSingletonFactory : virtual public SecondaryQrCodeLoginServiceIfFactory {
 public:
  SecondaryQrCodeLoginServiceIfSingletonFactory(const ::std::shared_ptr<SecondaryQrCodeLoginServiceIf>& iface) : iface_(iface) {}
  virtual ~SecondaryQrCodeLoginServiceIfSingletonFactory() {}

  virtual SecondaryQrCodeLoginServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SecondaryQrCodeLoginServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SecondaryQrCodeLoginServiceIf> iface_;
};

class SecondaryQrCodeLoginServiceNull : virtual public SecondaryQrCodeLoginServiceIf {
 public:
  virtual ~SecondaryQrCodeLoginServiceNull() {}
  void createSession( ::CreateQrSessionResponse& /* _return */, const  ::CreateQrSessionRequest& /* request */) {
    return;
  }
  void createQrCode( ::CreateQrCodeResponse& /* _return */, const  ::CreateQrCodeRequest& /* request */) {
    return;
  }
  void createPinCode( ::CreatePinCodeResponse& /* _return */, const  ::CreatePinCodeRequest& /* request */) {
    return;
  }
  void verifyCertificate(const  ::VerifyCertificateRequest& /* request */) {
    return;
  }
  void qrCodeLogin( ::QrCodeLoginResponse& /* _return */, const  ::QrCodeLoginRequest& /* request */) {
    return;
  }
};

typedef struct _SecondaryQrCodeLoginService_createSession_args__isset {
  _SecondaryQrCodeLoginService_createSession_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodeLoginService_createSession_args__isset;

class SecondaryQrCodeLoginService_createSession_args {
 public:

  SecondaryQrCodeLoginService_createSession_args(const SecondaryQrCodeLoginService_createSession_args&);
  SecondaryQrCodeLoginService_createSession_args& operator=(const SecondaryQrCodeLoginService_createSession_args&);
  SecondaryQrCodeLoginService_createSession_args() {
  }

  virtual ~SecondaryQrCodeLoginService_createSession_args() noexcept;
   ::CreateQrSessionRequest request;

  _SecondaryQrCodeLoginService_createSession_args__isset __isset;

  void __set_request(const  ::CreateQrSessionRequest& val);

  bool operator == (const SecondaryQrCodeLoginService_createSession_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_createSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_createSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodeLoginService_createSession_pargs {
 public:


  virtual ~SecondaryQrCodeLoginService_createSession_pargs() noexcept;
  const  ::CreateQrSessionRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_createSession_result__isset {
  _SecondaryQrCodeLoginService_createSession_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodeLoginService_createSession_result__isset;

class SecondaryQrCodeLoginService_createSession_result {
 public:

  SecondaryQrCodeLoginService_createSession_result(const SecondaryQrCodeLoginService_createSession_result&);
  SecondaryQrCodeLoginService_createSession_result& operator=(const SecondaryQrCodeLoginService_createSession_result&);
  SecondaryQrCodeLoginService_createSession_result() {
  }

  virtual ~SecondaryQrCodeLoginService_createSession_result() noexcept;
   ::CreateQrSessionResponse success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_createSession_result__isset __isset;

  void __set_success(const  ::CreateQrSessionResponse& val);

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodeLoginService_createSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_createSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_createSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_createSession_presult__isset {
  _SecondaryQrCodeLoginService_createSession_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodeLoginService_createSession_presult__isset;

class SecondaryQrCodeLoginService_createSession_presult {
 public:


  virtual ~SecondaryQrCodeLoginService_createSession_presult() noexcept;
   ::CreateQrSessionResponse* success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_createSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SecondaryQrCodeLoginService_createQrCode_args__isset {
  _SecondaryQrCodeLoginService_createQrCode_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodeLoginService_createQrCode_args__isset;

class SecondaryQrCodeLoginService_createQrCode_args {
 public:

  SecondaryQrCodeLoginService_createQrCode_args(const SecondaryQrCodeLoginService_createQrCode_args&);
  SecondaryQrCodeLoginService_createQrCode_args& operator=(const SecondaryQrCodeLoginService_createQrCode_args&);
  SecondaryQrCodeLoginService_createQrCode_args() {
  }

  virtual ~SecondaryQrCodeLoginService_createQrCode_args() noexcept;
   ::CreateQrCodeRequest request;

  _SecondaryQrCodeLoginService_createQrCode_args__isset __isset;

  void __set_request(const  ::CreateQrCodeRequest& val);

  bool operator == (const SecondaryQrCodeLoginService_createQrCode_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_createQrCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_createQrCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodeLoginService_createQrCode_pargs {
 public:


  virtual ~SecondaryQrCodeLoginService_createQrCode_pargs() noexcept;
  const  ::CreateQrCodeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_createQrCode_result__isset {
  _SecondaryQrCodeLoginService_createQrCode_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodeLoginService_createQrCode_result__isset;

class SecondaryQrCodeLoginService_createQrCode_result {
 public:

  SecondaryQrCodeLoginService_createQrCode_result(const SecondaryQrCodeLoginService_createQrCode_result&);
  SecondaryQrCodeLoginService_createQrCode_result& operator=(const SecondaryQrCodeLoginService_createQrCode_result&);
  SecondaryQrCodeLoginService_createQrCode_result() {
  }

  virtual ~SecondaryQrCodeLoginService_createQrCode_result() noexcept;
   ::CreateQrCodeResponse success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_createQrCode_result__isset __isset;

  void __set_success(const  ::CreateQrCodeResponse& val);

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodeLoginService_createQrCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_createQrCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_createQrCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_createQrCode_presult__isset {
  _SecondaryQrCodeLoginService_createQrCode_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodeLoginService_createQrCode_presult__isset;

class SecondaryQrCodeLoginService_createQrCode_presult {
 public:


  virtual ~SecondaryQrCodeLoginService_createQrCode_presult() noexcept;
   ::CreateQrCodeResponse* success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_createQrCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SecondaryQrCodeLoginService_createPinCode_args__isset {
  _SecondaryQrCodeLoginService_createPinCode_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodeLoginService_createPinCode_args__isset;

class SecondaryQrCodeLoginService_createPinCode_args {
 public:

  SecondaryQrCodeLoginService_createPinCode_args(const SecondaryQrCodeLoginService_createPinCode_args&);
  SecondaryQrCodeLoginService_createPinCode_args& operator=(const SecondaryQrCodeLoginService_createPinCode_args&);
  SecondaryQrCodeLoginService_createPinCode_args() {
  }

  virtual ~SecondaryQrCodeLoginService_createPinCode_args() noexcept;
   ::CreatePinCodeRequest request;

  _SecondaryQrCodeLoginService_createPinCode_args__isset __isset;

  void __set_request(const  ::CreatePinCodeRequest& val);

  bool operator == (const SecondaryQrCodeLoginService_createPinCode_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_createPinCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_createPinCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodeLoginService_createPinCode_pargs {
 public:


  virtual ~SecondaryQrCodeLoginService_createPinCode_pargs() noexcept;
  const  ::CreatePinCodeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_createPinCode_result__isset {
  _SecondaryQrCodeLoginService_createPinCode_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodeLoginService_createPinCode_result__isset;

class SecondaryQrCodeLoginService_createPinCode_result {
 public:

  SecondaryQrCodeLoginService_createPinCode_result(const SecondaryQrCodeLoginService_createPinCode_result&);
  SecondaryQrCodeLoginService_createPinCode_result& operator=(const SecondaryQrCodeLoginService_createPinCode_result&);
  SecondaryQrCodeLoginService_createPinCode_result() {
  }

  virtual ~SecondaryQrCodeLoginService_createPinCode_result() noexcept;
   ::CreatePinCodeResponse success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_createPinCode_result__isset __isset;

  void __set_success(const  ::CreatePinCodeResponse& val);

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodeLoginService_createPinCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_createPinCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_createPinCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_createPinCode_presult__isset {
  _SecondaryQrCodeLoginService_createPinCode_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodeLoginService_createPinCode_presult__isset;

class SecondaryQrCodeLoginService_createPinCode_presult {
 public:


  virtual ~SecondaryQrCodeLoginService_createPinCode_presult() noexcept;
   ::CreatePinCodeResponse* success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_createPinCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SecondaryQrCodeLoginService_verifyCertificate_args__isset {
  _SecondaryQrCodeLoginService_verifyCertificate_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodeLoginService_verifyCertificate_args__isset;

class SecondaryQrCodeLoginService_verifyCertificate_args {
 public:

  SecondaryQrCodeLoginService_verifyCertificate_args(const SecondaryQrCodeLoginService_verifyCertificate_args&);
  SecondaryQrCodeLoginService_verifyCertificate_args& operator=(const SecondaryQrCodeLoginService_verifyCertificate_args&);
  SecondaryQrCodeLoginService_verifyCertificate_args() {
  }

  virtual ~SecondaryQrCodeLoginService_verifyCertificate_args() noexcept;
   ::VerifyCertificateRequest request;

  _SecondaryQrCodeLoginService_verifyCertificate_args__isset __isset;

  void __set_request(const  ::VerifyCertificateRequest& val);

  bool operator == (const SecondaryQrCodeLoginService_verifyCertificate_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_verifyCertificate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_verifyCertificate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodeLoginService_verifyCertificate_pargs {
 public:


  virtual ~SecondaryQrCodeLoginService_verifyCertificate_pargs() noexcept;
  const  ::VerifyCertificateRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_verifyCertificate_result__isset {
  _SecondaryQrCodeLoginService_verifyCertificate_result__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodeLoginService_verifyCertificate_result__isset;

class SecondaryQrCodeLoginService_verifyCertificate_result {
 public:

  SecondaryQrCodeLoginService_verifyCertificate_result(const SecondaryQrCodeLoginService_verifyCertificate_result&);
  SecondaryQrCodeLoginService_verifyCertificate_result& operator=(const SecondaryQrCodeLoginService_verifyCertificate_result&);
  SecondaryQrCodeLoginService_verifyCertificate_result() {
  }

  virtual ~SecondaryQrCodeLoginService_verifyCertificate_result() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_verifyCertificate_result__isset __isset;

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodeLoginService_verifyCertificate_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_verifyCertificate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_verifyCertificate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_verifyCertificate_presult__isset {
  _SecondaryQrCodeLoginService_verifyCertificate_presult__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodeLoginService_verifyCertificate_presult__isset;

class SecondaryQrCodeLoginService_verifyCertificate_presult {
 public:


  virtual ~SecondaryQrCodeLoginService_verifyCertificate_presult() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_verifyCertificate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SecondaryQrCodeLoginService_qrCodeLogin_args__isset {
  _SecondaryQrCodeLoginService_qrCodeLogin_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodeLoginService_qrCodeLogin_args__isset;

class SecondaryQrCodeLoginService_qrCodeLogin_args {
 public:

  SecondaryQrCodeLoginService_qrCodeLogin_args(const SecondaryQrCodeLoginService_qrCodeLogin_args&);
  SecondaryQrCodeLoginService_qrCodeLogin_args& operator=(const SecondaryQrCodeLoginService_qrCodeLogin_args&);
  SecondaryQrCodeLoginService_qrCodeLogin_args() {
  }

  virtual ~SecondaryQrCodeLoginService_qrCodeLogin_args() noexcept;
   ::QrCodeLoginRequest request;

  _SecondaryQrCodeLoginService_qrCodeLogin_args__isset __isset;

  void __set_request(const  ::QrCodeLoginRequest& val);

  bool operator == (const SecondaryQrCodeLoginService_qrCodeLogin_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_qrCodeLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_qrCodeLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodeLoginService_qrCodeLogin_pargs {
 public:


  virtual ~SecondaryQrCodeLoginService_qrCodeLogin_pargs() noexcept;
  const  ::QrCodeLoginRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_qrCodeLogin_result__isset {
  _SecondaryQrCodeLoginService_qrCodeLogin_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodeLoginService_qrCodeLogin_result__isset;

class SecondaryQrCodeLoginService_qrCodeLogin_result {
 public:

  SecondaryQrCodeLoginService_qrCodeLogin_result(const SecondaryQrCodeLoginService_qrCodeLogin_result&);
  SecondaryQrCodeLoginService_qrCodeLogin_result& operator=(const SecondaryQrCodeLoginService_qrCodeLogin_result&);
  SecondaryQrCodeLoginService_qrCodeLogin_result() {
  }

  virtual ~SecondaryQrCodeLoginService_qrCodeLogin_result() noexcept;
   ::QrCodeLoginResponse success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_qrCodeLogin_result__isset __isset;

  void __set_success(const  ::QrCodeLoginResponse& val);

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodeLoginService_qrCodeLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginService_qrCodeLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginService_qrCodeLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginService_qrCodeLogin_presult__isset {
  _SecondaryQrCodeLoginService_qrCodeLogin_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _SecondaryQrCodeLoginService_qrCodeLogin_presult__isset;

class SecondaryQrCodeLoginService_qrCodeLogin_presult {
 public:


  virtual ~SecondaryQrCodeLoginService_qrCodeLogin_presult() noexcept;
   ::QrCodeLoginResponse* success;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginService_qrCodeLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SecondaryQrCodeLoginServiceClient : virtual public SecondaryQrCodeLoginServiceIf {
 public:
  SecondaryQrCodeLoginServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SecondaryQrCodeLoginServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createSession( ::CreateQrSessionResponse& _return, const  ::CreateQrSessionRequest& request);
  void send_createSession(const  ::CreateQrSessionRequest& request);
  void recv_createSession( ::CreateQrSessionResponse& _return);
  void createQrCode( ::CreateQrCodeResponse& _return, const  ::CreateQrCodeRequest& request);
  void send_createQrCode(const  ::CreateQrCodeRequest& request);
  void recv_createQrCode( ::CreateQrCodeResponse& _return);
  void createPinCode( ::CreatePinCodeResponse& _return, const  ::CreatePinCodeRequest& request);
  void send_createPinCode(const  ::CreatePinCodeRequest& request);
  void recv_createPinCode( ::CreatePinCodeResponse& _return);
  void verifyCertificate(const  ::VerifyCertificateRequest& request);
  void send_verifyCertificate(const  ::VerifyCertificateRequest& request);
  void recv_verifyCertificate();
  void qrCodeLogin( ::QrCodeLoginResponse& _return, const  ::QrCodeLoginRequest& request);
  void send_qrCodeLogin(const  ::QrCodeLoginRequest& request);
  void recv_qrCodeLogin( ::QrCodeLoginResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SecondaryQrCodeLoginServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SecondaryQrCodeLoginServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SecondaryQrCodeLoginServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createQrCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createPinCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verifyCertificate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_qrCodeLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SecondaryQrCodeLoginServiceProcessor(::std::shared_ptr<SecondaryQrCodeLoginServiceIf> iface) :
    iface_(iface) {
    processMap_["createSession"] = &SecondaryQrCodeLoginServiceProcessor::process_createSession;
    processMap_["createQrCode"] = &SecondaryQrCodeLoginServiceProcessor::process_createQrCode;
    processMap_["createPinCode"] = &SecondaryQrCodeLoginServiceProcessor::process_createPinCode;
    processMap_["verifyCertificate"] = &SecondaryQrCodeLoginServiceProcessor::process_verifyCertificate;
    processMap_["qrCodeLogin"] = &SecondaryQrCodeLoginServiceProcessor::process_qrCodeLogin;
  }

  virtual ~SecondaryQrCodeLoginServiceProcessor() {}
};

class SecondaryQrCodeLoginServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SecondaryQrCodeLoginServiceProcessorFactory(const ::std::shared_ptr< SecondaryQrCodeLoginServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SecondaryQrCodeLoginServiceIfFactory > handlerFactory_;
};

class SecondaryQrCodeLoginServiceMultiface : virtual public SecondaryQrCodeLoginServiceIf {
 public:
  SecondaryQrCodeLoginServiceMultiface(std::vector<std::shared_ptr<SecondaryQrCodeLoginServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SecondaryQrCodeLoginServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SecondaryQrCodeLoginServiceIf> > ifaces_;
  SecondaryQrCodeLoginServiceMultiface() {}
  void add(::std::shared_ptr<SecondaryQrCodeLoginServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createSession( ::CreateQrSessionResponse& _return, const  ::CreateQrSessionRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createSession(_return, request);
    }
    ifaces_[i]->createSession(_return, request);
    return;
  }

  void createQrCode( ::CreateQrCodeResponse& _return, const  ::CreateQrCodeRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createQrCode(_return, request);
    }
    ifaces_[i]->createQrCode(_return, request);
    return;
  }

  void createPinCode( ::CreatePinCodeResponse& _return, const  ::CreatePinCodeRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createPinCode(_return, request);
    }
    ifaces_[i]->createPinCode(_return, request);
    return;
  }

  void verifyCertificate(const  ::VerifyCertificateRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verifyCertificate(request);
    }
    ifaces_[i]->verifyCertificate(request);
  }

  void qrCodeLogin( ::QrCodeLoginResponse& _return, const  ::QrCodeLoginRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->qrCodeLogin(_return, request);
    }
    ifaces_[i]->qrCodeLogin(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SecondaryQrCodeLoginServiceConcurrentClient : virtual public SecondaryQrCodeLoginServiceIf {
 public:
  SecondaryQrCodeLoginServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SecondaryQrCodeLoginServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createSession( ::CreateQrSessionResponse& _return, const  ::CreateQrSessionRequest& request);
  int32_t send_createSession(const  ::CreateQrSessionRequest& request);
  void recv_createSession( ::CreateQrSessionResponse& _return, const int32_t seqid);
  void createQrCode( ::CreateQrCodeResponse& _return, const  ::CreateQrCodeRequest& request);
  int32_t send_createQrCode(const  ::CreateQrCodeRequest& request);
  void recv_createQrCode( ::CreateQrCodeResponse& _return, const int32_t seqid);
  void createPinCode( ::CreatePinCodeResponse& _return, const  ::CreatePinCodeRequest& request);
  int32_t send_createPinCode(const  ::CreatePinCodeRequest& request);
  void recv_createPinCode( ::CreatePinCodeResponse& _return, const int32_t seqid);
  void verifyCertificate(const  ::VerifyCertificateRequest& request);
  int32_t send_verifyCertificate(const  ::VerifyCertificateRequest& request);
  void recv_verifyCertificate(const int32_t seqid);
  void qrCodeLogin( ::QrCodeLoginResponse& _return, const  ::QrCodeLoginRequest& request);
  int32_t send_qrCodeLogin(const  ::QrCodeLoginRequest& request);
  void recv_qrCodeLogin( ::QrCodeLoginResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
