/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "exceptions_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




SecondaryQrCodeException::~SecondaryQrCodeException() noexcept {
}


void SecondaryQrCodeException::__set_code(const  ::SecondaryQrCodeErrorCode val) {
  this->code = val;
}

void SecondaryQrCodeException::__set_alertMessage(const std::string& val) {
  this->alertMessage = val;
}
std::ostream& operator<<(std::ostream& out, const SecondaryQrCodeException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SecondaryQrCodeException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->code = ( ::SecondaryQrCodeErrorCode)ecast0;
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->alertMessage);
          this->__isset.alertMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SecondaryQrCodeException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SecondaryQrCodeException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("alertMessage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->alertMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SecondaryQrCodeException &a, SecondaryQrCodeException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.alertMessage, b.alertMessage);
  swap(a.__isset, b.__isset);
}

SecondaryQrCodeException::SecondaryQrCodeException(const SecondaryQrCodeException& other1) : TException() {
  code = other1.code;
  alertMessage = other1.alertMessage;
  __isset = other1.__isset;
}
SecondaryQrCodeException& SecondaryQrCodeException::operator=(const SecondaryQrCodeException& other2) {
  code = other2.code;
  alertMessage = other2.alertMessage;
  __isset = other2.__isset;
  return *this;
}
void SecondaryQrCodeException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SecondaryQrCodeException(";
  // out << "code=" << to_string(code);
  out << "alertMessage=" << to_string(alertMessage);
  out << ")";
}

const char* SecondaryQrCodeException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: SecondaryQrCodeException";
  }
}


