/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "structs_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




CreateQrSessionRequest::~CreateQrSessionRequest() noexcept {
}

std::ostream& operator<<(std::ostream& out, const CreateQrSessionRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateQrSessionRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateQrSessionRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateQrSessionRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateQrSessionRequest &a, CreateQrSessionRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

CreateQrSessionRequest::CreateQrSessionRequest(const CreateQrSessionRequest& other0) {
  (void) other0;
}
CreateQrSessionRequest& CreateQrSessionRequest::operator=(const CreateQrSessionRequest& other1) {
  (void) other1;
  return *this;
}
void CreateQrSessionRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateQrSessionRequest(";
  out << ")";
}


CreateQrSessionResponse::~CreateQrSessionResponse() noexcept {
}


void CreateQrSessionResponse::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}
std::ostream& operator<<(std::ostream& out, const CreateQrSessionResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateQrSessionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateQrSessionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateQrSessionResponse");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateQrSessionResponse &a, CreateQrSessionResponse &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.__isset, b.__isset);
}

CreateQrSessionResponse::CreateQrSessionResponse(const CreateQrSessionResponse& other2) {
  authSessionId = other2.authSessionId;
  __isset = other2.__isset;
}
CreateQrSessionResponse& CreateQrSessionResponse::operator=(const CreateQrSessionResponse& other3) {
  authSessionId = other3.authSessionId;
  __isset = other3.__isset;
  return *this;
}
void CreateQrSessionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateQrSessionResponse(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ")";
}


CreateQrCodeRequest::~CreateQrCodeRequest() noexcept {
}


void CreateQrCodeRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}
std::ostream& operator<<(std::ostream& out, const CreateQrCodeRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateQrCodeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateQrCodeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateQrCodeRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateQrCodeRequest &a, CreateQrCodeRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.__isset, b.__isset);
}

CreateQrCodeRequest::CreateQrCodeRequest(const CreateQrCodeRequest& other4) {
  authSessionId = other4.authSessionId;
  __isset = other4.__isset;
}
CreateQrCodeRequest& CreateQrCodeRequest::operator=(const CreateQrCodeRequest& other5) {
  authSessionId = other5.authSessionId;
  __isset = other5.__isset;
  return *this;
}
void CreateQrCodeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateQrCodeRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ")";
}


CreateQrCodeResponse::~CreateQrCodeResponse() noexcept {
}


void CreateQrCodeResponse::__set_callbackUrl(const std::string& val) {
  this->callbackUrl = val;
}
std::ostream& operator<<(std::ostream& out, const CreateQrCodeResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreateQrCodeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->callbackUrl);
          this->__isset.callbackUrl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateQrCodeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreateQrCodeResponse");

  xfer += oprot->writeFieldBegin("callbackUrl", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->callbackUrl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateQrCodeResponse &a, CreateQrCodeResponse &b) {
  using ::std::swap;
  swap(a.callbackUrl, b.callbackUrl);
  swap(a.__isset, b.__isset);
}

CreateQrCodeResponse::CreateQrCodeResponse(const CreateQrCodeResponse& other6) {
  callbackUrl = other6.callbackUrl;
  __isset = other6.__isset;
}
CreateQrCodeResponse& CreateQrCodeResponse::operator=(const CreateQrCodeResponse& other7) {
  callbackUrl = other7.callbackUrl;
  __isset = other7.__isset;
  return *this;
}
void CreateQrCodeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreateQrCodeResponse(";
  out << "callbackUrl=" << to_string(callbackUrl);
  out << ")";
}


CreatePinCodeRequest::~CreatePinCodeRequest() noexcept {
}


void CreatePinCodeRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}
std::ostream& operator<<(std::ostream& out, const CreatePinCodeRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreatePinCodeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreatePinCodeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreatePinCodeRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreatePinCodeRequest &a, CreatePinCodeRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.__isset, b.__isset);
}

CreatePinCodeRequest::CreatePinCodeRequest(const CreatePinCodeRequest& other8) {
  authSessionId = other8.authSessionId;
  __isset = other8.__isset;
}
CreatePinCodeRequest& CreatePinCodeRequest::operator=(const CreatePinCodeRequest& other9) {
  authSessionId = other9.authSessionId;
  __isset = other9.__isset;
  return *this;
}
void CreatePinCodeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreatePinCodeRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ")";
}


CreatePinCodeResponse::~CreatePinCodeResponse() noexcept {
}


void CreatePinCodeResponse::__set_pinCode(const std::string& val) {
  this->pinCode = val;
}
std::ostream& operator<<(std::ostream& out, const CreatePinCodeResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CreatePinCodeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pinCode);
          this->__isset.pinCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreatePinCodeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CreatePinCodeResponse");

  xfer += oprot->writeFieldBegin("pinCode", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->pinCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreatePinCodeResponse &a, CreatePinCodeResponse &b) {
  using ::std::swap;
  swap(a.pinCode, b.pinCode);
  swap(a.__isset, b.__isset);
}

CreatePinCodeResponse::CreatePinCodeResponse(const CreatePinCodeResponse& other10) {
  pinCode = other10.pinCode;
  __isset = other10.__isset;
}
CreatePinCodeResponse& CreatePinCodeResponse::operator=(const CreatePinCodeResponse& other11) {
  pinCode = other11.pinCode;
  __isset = other11.__isset;
  return *this;
}
void CreatePinCodeResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CreatePinCodeResponse(";
  out << "pinCode=" << to_string(pinCode);
  out << ")";
}


CancelPinCodeRequest::~CancelPinCodeRequest() noexcept {
}


void CancelPinCodeRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}
std::ostream& operator<<(std::ostream& out, const CancelPinCodeRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CancelPinCodeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CancelPinCodeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CancelPinCodeRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CancelPinCodeRequest &a, CancelPinCodeRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.__isset, b.__isset);
}

CancelPinCodeRequest::CancelPinCodeRequest(const CancelPinCodeRequest& other12) {
  authSessionId = other12.authSessionId;
  __isset = other12.__isset;
}
CancelPinCodeRequest& CancelPinCodeRequest::operator=(const CancelPinCodeRequest& other13) {
  authSessionId = other13.authSessionId;
  __isset = other13.__isset;
  return *this;
}
void CancelPinCodeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CancelPinCodeRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ")";
}


VerifyCertificateRequest::~VerifyCertificateRequest() noexcept {
}


void VerifyCertificateRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}

void VerifyCertificateRequest::__set_certificate(const std::string& val) {
  this->certificate = val;
}
std::ostream& operator<<(std::ostream& out, const VerifyCertificateRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VerifyCertificateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->certificate);
          this->__isset.certificate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VerifyCertificateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VerifyCertificateRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("certificate", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->certificate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VerifyCertificateRequest &a, VerifyCertificateRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.certificate, b.certificate);
  swap(a.__isset, b.__isset);
}

VerifyCertificateRequest::VerifyCertificateRequest(const VerifyCertificateRequest& other14) {
  authSessionId = other14.authSessionId;
  certificate = other14.certificate;
  __isset = other14.__isset;
}
VerifyCertificateRequest& VerifyCertificateRequest::operator=(const VerifyCertificateRequest& other15) {
  authSessionId = other15.authSessionId;
  certificate = other15.certificate;
  __isset = other15.__isset;
  return *this;
}
void VerifyCertificateRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VerifyCertificateRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ", " << "certificate=" << to_string(certificate);
  out << ")";
}


QrCodeLoginRequest::~QrCodeLoginRequest() noexcept {
}


void QrCodeLoginRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}

void QrCodeLoginRequest::__set_systemName(const std::string& val) {
  this->systemName = val;
}

void QrCodeLoginRequest::__set_autoLoginIsRequired(const bool val) {
  this->autoLoginIsRequired = val;
}
std::ostream& operator<<(std::ostream& out, const QrCodeLoginRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QrCodeLoginRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->systemName);
          this->__isset.systemName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->autoLoginIsRequired);
          this->__isset.autoLoginIsRequired = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QrCodeLoginRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QrCodeLoginRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("systemName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->systemName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("autoLoginIsRequired", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->autoLoginIsRequired);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QrCodeLoginRequest &a, QrCodeLoginRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.systemName, b.systemName);
  swap(a.autoLoginIsRequired, b.autoLoginIsRequired);
  swap(a.__isset, b.__isset);
}

QrCodeLoginRequest::QrCodeLoginRequest(const QrCodeLoginRequest& other16) {
  authSessionId = other16.authSessionId;
  systemName = other16.systemName;
  autoLoginIsRequired = other16.autoLoginIsRequired;
  __isset = other16.__isset;
}
QrCodeLoginRequest& QrCodeLoginRequest::operator=(const QrCodeLoginRequest& other17) {
  authSessionId = other17.authSessionId;
  systemName = other17.systemName;
  autoLoginIsRequired = other17.autoLoginIsRequired;
  __isset = other17.__isset;
  return *this;
}
void QrCodeLoginRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QrCodeLoginRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ", " << "systemName=" << to_string(systemName);
  out << ", " << "autoLoginIsRequired=" << to_string(autoLoginIsRequired);
  out << ")";
}


QrCodeLoginResponse::~QrCodeLoginResponse() noexcept {
}


void QrCodeLoginResponse::__set_certificate(const std::string& val) {
  this->certificate = val;
}

void QrCodeLoginResponse::__set_accessToken(const std::string& val) {
  this->accessToken = val;
}

void QrCodeLoginResponse::__set_lastBindTimestamp(const int64_t val) {
  this->lastBindTimestamp = val;
}

void QrCodeLoginResponse::__set_metaData(const std::map<std::string, std::string> & val) {
  this->metaData = val;
}
std::ostream& operator<<(std::ostream& out, const QrCodeLoginResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QrCodeLoginResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->certificate);
          this->__isset.certificate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accessToken);
          this->__isset.accessToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastBindTimestamp);
          this->__isset.lastBindTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metaData.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _ktype19;
            ::apache::thrift::protocol::TType _vtype20;
            xfer += iprot->readMapBegin(_ktype19, _vtype20, _size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              std::string _key23;
              xfer += iprot->readString(_key23);
              std::string& _val24 = this->metaData[_key23];
              xfer += iprot->readString(_val24);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.metaData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QrCodeLoginResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QrCodeLoginResponse");

  xfer += oprot->writeFieldBegin("certificate", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->certificate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->accessToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastBindTimestamp", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->lastBindTimestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metaData", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metaData.size()));
    std::map<std::string, std::string> ::const_iterator _iter25;
    for (_iter25 = this->metaData.begin(); _iter25 != this->metaData.end(); ++_iter25)
    {
      xfer += oprot->writeString(_iter25->first);
      xfer += oprot->writeString(_iter25->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QrCodeLoginResponse &a, QrCodeLoginResponse &b) {
  using ::std::swap;
  swap(a.certificate, b.certificate);
  swap(a.accessToken, b.accessToken);
  swap(a.lastBindTimestamp, b.lastBindTimestamp);
  swap(a.metaData, b.metaData);
  swap(a.__isset, b.__isset);
}

QrCodeLoginResponse::QrCodeLoginResponse(const QrCodeLoginResponse& other26) {
  certificate = other26.certificate;
  accessToken = other26.accessToken;
  lastBindTimestamp = other26.lastBindTimestamp;
  metaData = other26.metaData;
  __isset = other26.__isset;
}
QrCodeLoginResponse& QrCodeLoginResponse::operator=(const QrCodeLoginResponse& other27) {
  certificate = other27.certificate;
  accessToken = other27.accessToken;
  lastBindTimestamp = other27.lastBindTimestamp;
  metaData = other27.metaData;
  __isset = other27.__isset;
  return *this;
}
void QrCodeLoginResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QrCodeLoginResponse(";
  out << "certificate=" << to_string(certificate);
  out << ", " << "accessToken=" << to_string(accessToken);
  out << ", " << "lastBindTimestamp=" << to_string(lastBindTimestamp);
  out << ", " << "metaData=" << to_string(metaData);
  out << ")";
}


CheckQrCodeVerifiedRequest::~CheckQrCodeVerifiedRequest() noexcept {
}


void CheckQrCodeVerifiedRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}
std::ostream& operator<<(std::ostream& out, const CheckQrCodeVerifiedRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CheckQrCodeVerifiedRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckQrCodeVerifiedRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckQrCodeVerifiedRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckQrCodeVerifiedRequest &a, CheckQrCodeVerifiedRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.__isset, b.__isset);
}

CheckQrCodeVerifiedRequest::CheckQrCodeVerifiedRequest(const CheckQrCodeVerifiedRequest& other28) {
  authSessionId = other28.authSessionId;
  __isset = other28.__isset;
}
CheckQrCodeVerifiedRequest& CheckQrCodeVerifiedRequest::operator=(const CheckQrCodeVerifiedRequest& other29) {
  authSessionId = other29.authSessionId;
  __isset = other29.__isset;
  return *this;
}
void CheckQrCodeVerifiedRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckQrCodeVerifiedRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ")";
}


CheckPinCodeVerifiedRequest::~CheckPinCodeVerifiedRequest() noexcept {
}


void CheckPinCodeVerifiedRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}
std::ostream& operator<<(std::ostream& out, const CheckPinCodeVerifiedRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CheckPinCodeVerifiedRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CheckPinCodeVerifiedRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CheckPinCodeVerifiedRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CheckPinCodeVerifiedRequest &a, CheckPinCodeVerifiedRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.__isset, b.__isset);
}

CheckPinCodeVerifiedRequest::CheckPinCodeVerifiedRequest(const CheckPinCodeVerifiedRequest& other30) {
  authSessionId = other30.authSessionId;
  __isset = other30.__isset;
}
CheckPinCodeVerifiedRequest& CheckPinCodeVerifiedRequest::operator=(const CheckPinCodeVerifiedRequest& other31) {
  authSessionId = other31.authSessionId;
  __isset = other31.__isset;
  return *this;
}
void CheckPinCodeVerifiedRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CheckPinCodeVerifiedRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ")";
}


GetLoginActorContextRequest::~GetLoginActorContextRequest() noexcept {
}


void GetLoginActorContextRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}
std::ostream& operator<<(std::ostream& out, const GetLoginActorContextRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetLoginActorContextRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetLoginActorContextRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetLoginActorContextRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetLoginActorContextRequest &a, GetLoginActorContextRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.__isset, b.__isset);
}

GetLoginActorContextRequest::GetLoginActorContextRequest(const GetLoginActorContextRequest& other32) {
  authSessionId = other32.authSessionId;
  __isset = other32.__isset;
}
GetLoginActorContextRequest& GetLoginActorContextRequest::operator=(const GetLoginActorContextRequest& other33) {
  authSessionId = other33.authSessionId;
  __isset = other33.__isset;
  return *this;
}
void GetLoginActorContextRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetLoginActorContextRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ")";
}


GetLoginActorContextResponse::~GetLoginActorContextResponse() noexcept {
}


void GetLoginActorContextResponse::__set_appType(const std::string& val) {
  this->appType = val;
}

void GetLoginActorContextResponse::__set_accessLocation(const std::string& val) {
  this->accessLocation = val;
}
std::ostream& operator<<(std::ostream& out, const GetLoginActorContextResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GetLoginActorContextResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appType);
          this->__isset.appType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accessLocation);
          this->__isset.accessLocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetLoginActorContextResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetLoginActorContextResponse");

  xfer += oprot->writeFieldBegin("appType", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accessLocation", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->accessLocation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetLoginActorContextResponse &a, GetLoginActorContextResponse &b) {
  using ::std::swap;
  swap(a.appType, b.appType);
  swap(a.accessLocation, b.accessLocation);
  swap(a.__isset, b.__isset);
}

GetLoginActorContextResponse::GetLoginActorContextResponse(const GetLoginActorContextResponse& other34) {
  appType = other34.appType;
  accessLocation = other34.accessLocation;
  __isset = other34.__isset;
}
GetLoginActorContextResponse& GetLoginActorContextResponse::operator=(const GetLoginActorContextResponse& other35) {
  appType = other35.appType;
  accessLocation = other35.accessLocation;
  __isset = other35.__isset;
  return *this;
}
void GetLoginActorContextResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetLoginActorContextResponse(";
  out << "appType=" << to_string(appType);
  out << ", " << "accessLocation=" << to_string(accessLocation);
  out << ")";
}


VerifyPinCodeRequest::~VerifyPinCodeRequest() noexcept {
}


void VerifyPinCodeRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}

void VerifyPinCodeRequest::__set_pinCode(const std::string& val) {
  this->pinCode = val;
}
std::ostream& operator<<(std::ostream& out, const VerifyPinCodeRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VerifyPinCodeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pinCode);
          this->__isset.pinCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VerifyPinCodeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VerifyPinCodeRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pinCode", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pinCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VerifyPinCodeRequest &a, VerifyPinCodeRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.pinCode, b.pinCode);
  swap(a.__isset, b.__isset);
}

VerifyPinCodeRequest::VerifyPinCodeRequest(const VerifyPinCodeRequest& other36) {
  authSessionId = other36.authSessionId;
  pinCode = other36.pinCode;
  __isset = other36.__isset;
}
VerifyPinCodeRequest& VerifyPinCodeRequest::operator=(const VerifyPinCodeRequest& other37) {
  authSessionId = other37.authSessionId;
  pinCode = other37.pinCode;
  __isset = other37.__isset;
  return *this;
}
void VerifyPinCodeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VerifyPinCodeRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ", " << "pinCode=" << to_string(pinCode);
  out << ")";
}


VerifyQrCodeRequest::~VerifyQrCodeRequest() noexcept {
}


void VerifyQrCodeRequest::__set_authSessionId(const std::string& val) {
  this->authSessionId = val;
}

void VerifyQrCodeRequest::__set_metaData(const std::map<std::string, std::string> & val) {
  this->metaData = val;
}
std::ostream& operator<<(std::ostream& out, const VerifyQrCodeRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VerifyQrCodeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->authSessionId);
          this->__isset.authSessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metaData.clear();
            uint32_t _size38;
            ::apache::thrift::protocol::TType _ktype39;
            ::apache::thrift::protocol::TType _vtype40;
            xfer += iprot->readMapBegin(_ktype39, _vtype40, _size38);
            uint32_t _i42;
            for (_i42 = 0; _i42 < _size38; ++_i42)
            {
              std::string _key43;
              xfer += iprot->readString(_key43);
              std::string& _val44 = this->metaData[_key43];
              xfer += iprot->readString(_val44);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.metaData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VerifyQrCodeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VerifyQrCodeRequest");

  xfer += oprot->writeFieldBegin("authSessionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->authSessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metaData", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metaData.size()));
    std::map<std::string, std::string> ::const_iterator _iter45;
    for (_iter45 = this->metaData.begin(); _iter45 != this->metaData.end(); ++_iter45)
    {
      xfer += oprot->writeString(_iter45->first);
      xfer += oprot->writeString(_iter45->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VerifyQrCodeRequest &a, VerifyQrCodeRequest &b) {
  using ::std::swap;
  swap(a.authSessionId, b.authSessionId);
  swap(a.metaData, b.metaData);
  swap(a.__isset, b.__isset);
}

VerifyQrCodeRequest::VerifyQrCodeRequest(const VerifyQrCodeRequest& other46) {
  authSessionId = other46.authSessionId;
  metaData = other46.metaData;
  __isset = other46.__isset;
}
VerifyQrCodeRequest& VerifyQrCodeRequest::operator=(const VerifyQrCodeRequest& other47) {
  authSessionId = other47.authSessionId;
  metaData = other47.metaData;
  __isset = other47.__isset;
  return *this;
}
void VerifyQrCodeRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VerifyQrCodeRequest(";
  out << "authSessionId=" << to_string(authSessionId);
  out << ", " << "metaData=" << to_string(metaData);
  out << ")";
}


