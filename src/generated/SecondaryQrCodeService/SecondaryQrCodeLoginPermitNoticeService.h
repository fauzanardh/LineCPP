/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SecondaryQrCodeLoginPermitNoticeService_H
#define SecondaryQrCodeLoginPermitNoticeService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "service_types.h"

namespace LineThrift { namespace SecondaryQrCode {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SecondaryQrCodeLoginPermitNoticeServiceIf {
 public:
  virtual ~SecondaryQrCodeLoginPermitNoticeServiceIf() {}
  virtual void checkQrCodeVerified(const  ::CheckQrCodeVerifiedRequest& request) = 0;
  virtual void checkPinCodeVerified(const  ::CheckPinCodeVerifiedRequest& request) = 0;
};

class SecondaryQrCodeLoginPermitNoticeServiceIfFactory {
 public:
  typedef SecondaryQrCodeLoginPermitNoticeServiceIf Handler;

  virtual ~SecondaryQrCodeLoginPermitNoticeServiceIfFactory() {}

  virtual SecondaryQrCodeLoginPermitNoticeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SecondaryQrCodeLoginPermitNoticeServiceIf* /* handler */) = 0;
};

class SecondaryQrCodeLoginPermitNoticeServiceIfSingletonFactory : virtual public SecondaryQrCodeLoginPermitNoticeServiceIfFactory {
 public:
  SecondaryQrCodeLoginPermitNoticeServiceIfSingletonFactory(const ::std::shared_ptr<SecondaryQrCodeLoginPermitNoticeServiceIf>& iface) : iface_(iface) {}
  virtual ~SecondaryQrCodeLoginPermitNoticeServiceIfSingletonFactory() {}

  virtual SecondaryQrCodeLoginPermitNoticeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SecondaryQrCodeLoginPermitNoticeServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SecondaryQrCodeLoginPermitNoticeServiceIf> iface_;
};

class SecondaryQrCodeLoginPermitNoticeServiceNull : virtual public SecondaryQrCodeLoginPermitNoticeServiceIf {
 public:
  virtual ~SecondaryQrCodeLoginPermitNoticeServiceNull() {}
  void checkQrCodeVerified(const  ::CheckQrCodeVerifiedRequest& /* request */) {
    return;
  }
  void checkPinCodeVerified(const  ::CheckPinCodeVerifiedRequest& /* request */) {
    return;
  }
};

typedef struct _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args__isset {
  _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args__isset;

class SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args {
 public:

  SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args(const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args&);
  SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args& operator=(const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args&);
  SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args() {
  }

  virtual ~SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args() noexcept;
   ::CheckQrCodeVerifiedRequest request;

  _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args__isset __isset;

  void __set_request(const  ::CheckQrCodeVerifiedRequest& val);

  bool operator == (const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_pargs {
 public:


  virtual ~SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_pargs() noexcept;
  const  ::CheckQrCodeVerifiedRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result__isset {
  _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result__isset;

class SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result {
 public:

  SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result(const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result&);
  SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result& operator=(const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result&);
  SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result() {
  }

  virtual ~SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result__isset __isset;

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_presult__isset {
  _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_presult__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_presult__isset;

class SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_presult {
 public:


  virtual ~SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_presult() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginPermitNoticeService_checkQrCodeVerified_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args__isset {
  _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args__isset() : request(false) {}
  bool request :1;
} _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args__isset;

class SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args {
 public:

  SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args(const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args&);
  SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args& operator=(const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args&);
  SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args() {
  }

  virtual ~SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args() noexcept;
   ::CheckPinCodeVerifiedRequest request;

  _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args__isset __isset;

  void __set_request(const  ::CheckPinCodeVerifiedRequest& val);

  bool operator == (const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_pargs {
 public:


  virtual ~SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_pargs() noexcept;
  const  ::CheckPinCodeVerifiedRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result__isset {
  _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result__isset;

class SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result {
 public:

  SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result(const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result&);
  SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result& operator=(const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result&);
  SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result() {
  }

  virtual ~SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result__isset __isset;

  void __set_e(const  ::SecondaryQrCodeException& val);

  bool operator == (const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_presult__isset {
  _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_presult__isset() : e(false) {}
  bool e :1;
} _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_presult__isset;

class SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_presult {
 public:


  virtual ~SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_presult() noexcept;
   ::SecondaryQrCodeException e;

  _SecondaryQrCodeLoginPermitNoticeService_checkPinCodeVerified_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SecondaryQrCodeLoginPermitNoticeServiceClient : virtual public SecondaryQrCodeLoginPermitNoticeServiceIf {
 public:
  SecondaryQrCodeLoginPermitNoticeServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SecondaryQrCodeLoginPermitNoticeServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void checkQrCodeVerified(const  ::CheckQrCodeVerifiedRequest& request);
  void send_checkQrCodeVerified(const  ::CheckQrCodeVerifiedRequest& request);
  void recv_checkQrCodeVerified();
  void checkPinCodeVerified(const  ::CheckPinCodeVerifiedRequest& request);
  void send_checkPinCodeVerified(const  ::CheckPinCodeVerifiedRequest& request);
  void recv_checkPinCodeVerified();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SecondaryQrCodeLoginPermitNoticeServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SecondaryQrCodeLoginPermitNoticeServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SecondaryQrCodeLoginPermitNoticeServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_checkQrCodeVerified(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkPinCodeVerified(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SecondaryQrCodeLoginPermitNoticeServiceProcessor(::std::shared_ptr<SecondaryQrCodeLoginPermitNoticeServiceIf> iface) :
    iface_(iface) {
    processMap_["checkQrCodeVerified"] = &SecondaryQrCodeLoginPermitNoticeServiceProcessor::process_checkQrCodeVerified;
    processMap_["checkPinCodeVerified"] = &SecondaryQrCodeLoginPermitNoticeServiceProcessor::process_checkPinCodeVerified;
  }

  virtual ~SecondaryQrCodeLoginPermitNoticeServiceProcessor() {}
};

class SecondaryQrCodeLoginPermitNoticeServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SecondaryQrCodeLoginPermitNoticeServiceProcessorFactory(const ::std::shared_ptr< SecondaryQrCodeLoginPermitNoticeServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SecondaryQrCodeLoginPermitNoticeServiceIfFactory > handlerFactory_;
};

class SecondaryQrCodeLoginPermitNoticeServiceMultiface : virtual public SecondaryQrCodeLoginPermitNoticeServiceIf {
 public:
  SecondaryQrCodeLoginPermitNoticeServiceMultiface(std::vector<std::shared_ptr<SecondaryQrCodeLoginPermitNoticeServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SecondaryQrCodeLoginPermitNoticeServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SecondaryQrCodeLoginPermitNoticeServiceIf> > ifaces_;
  SecondaryQrCodeLoginPermitNoticeServiceMultiface() {}
  void add(::std::shared_ptr<SecondaryQrCodeLoginPermitNoticeServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void checkQrCodeVerified(const  ::CheckQrCodeVerifiedRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkQrCodeVerified(request);
    }
    ifaces_[i]->checkQrCodeVerified(request);
  }

  void checkPinCodeVerified(const  ::CheckPinCodeVerifiedRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkPinCodeVerified(request);
    }
    ifaces_[i]->checkPinCodeVerified(request);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SecondaryQrCodeLoginPermitNoticeServiceConcurrentClient : virtual public SecondaryQrCodeLoginPermitNoticeServiceIf {
 public:
  SecondaryQrCodeLoginPermitNoticeServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SecondaryQrCodeLoginPermitNoticeServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void checkQrCodeVerified(const  ::CheckQrCodeVerifiedRequest& request);
  int32_t send_checkQrCodeVerified(const  ::CheckQrCodeVerifiedRequest& request);
  void recv_checkQrCodeVerified(const int32_t seqid);
  void checkPinCodeVerified(const  ::CheckPinCodeVerifiedRequest& request);
  int32_t send_checkPinCodeVerified(const  ::CheckPinCodeVerifiedRequest& request);
  void recv_checkPinCodeVerified(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
